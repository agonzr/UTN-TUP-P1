# Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario.
def factorial(n):
    if n < 0:
        return 0
    elif n == 0:
        return 1
    else:
        return n * factorial(n - 1)
    
n = int(input("Por favor ingres√° el n√∫mero: "))

if n < 0:
    print("El factorial no se puede calcular con n√∫meros negativos.")
elif n == 0:
    print("El factorial de 0 es 1")
else:
    for i in range(1, n + 1):
        print(f"El factorial de {i} es: {factorial(i)}")

# Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

n = int(input("¬øCu√°ntos t√©rminos de Fibonacci quer√©s ver? "))

for i in range(n):
    print(f"Fibonacci({i}) = {fibonacci(i)}")

# Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.
def potencia(n, m):
    if m == 0:
        return 1
    else:
        return n * potencia(n, m - 1)

n = int(input("Ingres√° la base: "))
m = int(input("Ingres√° el exponente: "))

resultado = potencia(n, m)

print(f"{n} elevado a la {m} es: {resultado}")

# Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.
def binario(n):
    if n < 2:
        return str(n)
    else:
        return binario(n // 2) + str(n % 2)

n = int(input("Ingres√° un n√∫mero entero positivo: "))

if n < 0:
    print("Por favor ingres√° un n√∫mero positivo.")
else:
    resultado = binario(n)
    print(f"El n√∫mero {n} en binario es: {resultado}")

# Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
def es_palindromo(palabra):
    tildes = "√°√©√≠√≥√∫√Å√â√ç√ì√ö"

    if any(letra in tildes or letra == " " for letra in palabra):
        return False

    if len(palabra) <= 1:
        return True

    if palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

palabra = input("Ingres√° una palabra sin espacios ni tildes: ").lower()

resultado = es_palindromo(palabra)
print(resultado)


# Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)
    
n = int(input("Por favor ingrese un n√∫mero: "))

suma = suma_digitos(n)
print(suma)


# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

bloq = int(input("Ingres√° la cantidad de bloques del ultimo nivel: "))

cant = contar_bloques(bloq)
print(f"Necesitas {cant} bloques para completar la piramide.")


# Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    elif numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

try:
    numero = int(input("Ingres√° un n√∫mero entero positivo: "))
    digito = int(input("Ingres√° un d√≠gito entre 0 y 9: "))

    if numero < 0 or not (0 <= digito <= 9):
        print("Entrada inv√°lida. El n√∫mero debe ser positivo y el d√≠gito debe estar entre 0 y 9.")
    else:
        resultado = contar_digito(numero, digito)
        print(f"El d√≠gito {digito} aparece {resultado} vez/veces en el n√∫mero {numero}.")
except ValueError:
    print("Entrada inv√°lida. Deb√©s ingresar solo n√∫meros enteros.")